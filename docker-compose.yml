version: '3.8'

services:
  # Zookeeper - wymagany przez Kafka
  zookeeper:
    image: confluentinc/cp-zookeeper:7.4.0
    hostname: zookeeper
    container_name: zookeeper
    ports:
      - "2181:2181"
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    networks:
      - kafka-network
    deploy:
      resources:
        limits:
          memory: 256M
        reservations:
          memory: 128M

  # Kafka Broker
  kafka:
    image: confluentinc/cp-kafka:7.4.0
    hostname: kafka
    container_name: kafka
    depends_on:
      - zookeeper
    ports:
      - "9092:9092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: 'zookeeper:2181'
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:29092,PLAINTEXT_HOST://localhost:9092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
      # Ograniczenia pamięci
      KAFKA_HEAP_OPTS: "-Xmx256M -Xms256M"
      KAFKA_OPTS: "-Djava.awt.headless=true"
    networks:
      - kafka-network
    deploy:
      resources:
        limits:
          memory: 512M
        reservations:
          memory: 256M
    healthcheck:
      test: ["CMD-SHELL", "kafka-topics --bootstrap-server localhost:9092 --list"]
      interval: 30s
      timeout: 10s
      retries: 8
      start_period: 90s

  # Kafka Topic Creator
  kafka-init:
    image: confluentinc/cp-kafka:7.4.0
    depends_on:
      kafka:
        condition: service_healthy
    command: |
      bash -c "
      kafka-topics --create --if-not-exists --bootstrap-server kafka:29092 --partitions 3 --replication-factor 1 --topic city-temperatures
      echo 'Topic city-temperatures created successfully'
      "
    networks:
      - kafka-network

  # Producer temperatury
  temperature-producer:
    build: .
    container_name: temperature-producer
    depends_on:
      kafka-init:
        condition: service_completed_successfully
    environment:
      - KAFKA_BOOTSTRAP_SERVERS=kafka:29092
    command: python3 Producer.py
    networks:
      - kafka-network
    stdin_open: true
    tty: true

  # Spark Consumer/Detector - BEZ SPARK UI
  spark-detector:
    build: .
    container_name: spark-detector
    depends_on:
      - temperature-producer
    environment:
      - KAFKA_BOOTSTRAP_SERVERS=kafka:29092
      - SPARK_MASTER=local[*]
      - PYSPARK_SUBMIT_ARGS=--driver-memory 512m --executor-memory 512m pyspark-shell
      # WYŁĄCZENIE SPARK UI
      - SPARK_UI_ENABLED=false
    command: python3 spark_detection.py
    # USUNIĘTE PORTY SPARK UI
    volumes:
      - ./output:/app/output
      - ./checkpoints:/app/checkpoints
    networks:
      - kafka-network
    deploy:
      resources:
        limits:
          memory: 768M
        reservations:
          memory: 512M

networks:
  kafka-network:
    driver: bridge