#!/usr/bin/env python3
"""
IoT Temperature Sensor Simulator
Symuluje czujniki temperatury w r√≥≈ºnych miastach Polski
Wysy≈Ça dane do Kafka w czasie rzeczywistym
"""

import json
import random
import time
from datetime import datetime
from kafka import KafkaProducer


class TemperatureSensorSimulator:
    def __init__(self, bootstrap_servers='localhost:9092'):
        """
        Inicjalizacja symulatora czujnik√≥w
        """
        # Konfiguracja Kafka z poprawnym kodowaniem UTF-8
        self.producer = KafkaProducer(
            bootstrap_servers=bootstrap_servers,
            value_serializer=lambda v: json.dumps(v, ensure_ascii=False).encode('utf-8')
        )

        # Miasta i ich typowe temperatury (≈õrednie sezonowe)
        self.cities = {
            'Warszawa': {'min': 15, 'max': 25, 'city_name': 'Warszawa'},
            'Krakow': {'min': 14, 'max': 24, 'city_name': 'Krakow'},
            'Gdansk': {'min': 12, 'max': 22, 'city_name': 'Gdansk'},
            'Wroclaw': {'min': 16, 'max': 26, 'city_name': 'Wroclaw'},
            'Poznan': {'min': 15, 'max': 25, 'city_name': 'Poznan'},
            'Lodz': {'min': 14, 'max': 24, 'city_name': 'Lodz'},
        }

        # Inicjalizuj tracking ostatnich temperatur dla spike detection
        for city_name in self.cities.keys():
            setattr(self, f"last_temp_{city_name}", 20.0)

        # Topic Kafka
        self.topic = 'city-temperatures'

        print(f"üå°Ô∏è  Temperature Sensor Simulator uruchomiony!")
        print(f"üì° Wysy≈Çanie danych do topicu: {self.topic}")
        print(f"üèôÔ∏è  Monitorowane miasta: {', '.join(self.cities.keys())}")
        print("-" * 60)

    def generate_temperature(self, city_config, city_name=None):
        """
        Generuje realistycznƒÖ temperaturƒô z r√≥≈ºnymi typami anomalii
        2.5% - wysoka temperatura (50+¬∞C)
        2.5% - niska temperatura (-30¬∞C)
        5% - spike (nag≈Çy skok wzglƒôdem poprzedniej)
        """
        # Normalna temperatura bazowa
        base_temp = random.uniform(city_config['min'], city_config['max'])

        # Sprawd≈∫ typ anomalii
        anomaly_roll = random.random()

        if anomaly_roll < 0.025:  # 2.5% - Ekstremalna wysoka temperatura
            temp = random.uniform(50, 70)  # 50-70¬∞C (usterka czujnika/po≈ºar)
            print(f"üî• ANOMALIA WYSOKA: Ekstremalna temperatura {temp:.1f}¬∞C!")

        elif anomaly_roll < 0.05:  # 2.5% - Ekstremalna niska temperatura
            temp = random.uniform(-35, -20)  # -35 do -20¬∞C (awaria/mr√≥z)
            print(f"‚ùÑÔ∏è  ANOMALIA NISKA: Ekstremalna temperatura {temp:.1f}¬∞C!")

        elif anomaly_roll < 0.1:  # 5% - Spike (nag≈Çy skok)
            # Pobierz ostatniƒÖ temperaturƒô dla tego miasta
            if city_name is None:
                city_name = city_config.get('city_name', 'unknown')

            last_temp_key = f"last_temp_{city_name}"
            last_temp = getattr(self, last_temp_key, base_temp)

            # Nag≈Çy skok w g√≥rƒô lub w d√≥≈Ç
            spike_direction = random.choice([1, -1])
            spike_magnitude = random.uniform(20, 40)  # 20-40¬∞C skok
            temp = last_temp + (spike_direction * spike_magnitude)

            print(f"‚ö° SPIKE ANOMALIA: {'+' if spike_direction > 0 else ''}{spike_direction * spike_magnitude:.1f}¬∞C "
                  f"(z {last_temp:.1f}¬∞C ‚Üí {temp:.1f}¬∞C)")

        else:  # 90% - Normalna temperatura
            temp = base_temp
            # Dodaj ma≈Çe naturalne wahania
            temp += random.uniform(-2, 2)

        # Zapamiƒôtaj temperaturƒô dla spike detection
        if city_name is None:
            city_name = city_config.get('city_name', 'unknown')
        setattr(self, f"last_temp_{city_name}", temp)

        return round(temp, 1)  # ‚Üê TO BY≈ÅO NAJWA≈ªNIEJSZE!

    def create_sensor_data(self, city, temperature):
        """
        Tworzy strukturƒô danych czujnika
        """
        return {
            'sensor_id': f"sensor_{city.lower()}_{random.randint(1, 3)}",
            'city': city,
            'temperature': temperature,
            'timestamp': datetime.now().isoformat(),
            'humidity': round(random.uniform(30, 70), 1),  # Bonus: wilgotno≈õƒá
            'pressure': round(random.uniform(1000, 1030), 1)  # Bonus: ci≈õnienie
        }

    def send_data(self, data):
        """
        Wysy≈Ça dane do Kafka
        """
        try:
            future = self.producer.send(self.topic, data)
            # Czekaj na potwierdzenie
            record_metadata = future.get(timeout=10)

            # Log wys≈Çanych danych
            temp_status = "üî•" if data['temperature'] > 30 else "‚ùÑÔ∏è" if data['temperature'] < 0 else "üå°Ô∏è"
            print(f"{temp_status} {data['city']}: {data['temperature']}¬∞C | "
                  f"Czujnik: {data['sensor_id']} | {data['timestamp'][:19]}")

            return True
        except Exception as e:
            print(f"‚ùå B≈ÇƒÖd wysy≈Çania danych: {e}")
            return False

    def run_simulation(self, duration_minutes=60, interval_seconds=5):
        """
        Uruchamia symulacjƒô na okre≈õlony czas

        Args:
            duration_minutes: czas trwania symulacji w minutach
            interval_seconds: odstƒôp miƒôdzy wysy≈Çaniem danych w sekundach
        """
        print(f"‚ñ∂Ô∏è  Rozpoczynam symulacjƒô na {duration_minutes} minut")
        print(f"‚è±Ô∏è  Dane wysy≈Çane co {interval_seconds} sekund")
        print("=" * 60)

        start_time = time.time()
        end_time = start_time + (duration_minutes * 60)

        try:
            while time.time() < end_time:
                # Dla ka≈ºdego miasta
                for city_name, config in self.cities.items():
                    # Generuj temperaturƒô z nowymi anomaliami (przeka≈º city_name explicite)
                    temperature = self.generate_temperature(config, city_name)

                    # Utw√≥rz dane czujnika
                    sensor_data = self.create_sensor_data(city_name, temperature)

                    # Wy≈õlij do Kafka
                    self.send_data(sensor_data)

                # Pauza przed nastƒôpnym cyklem
                time.sleep(interval_seconds)

        except KeyboardInterrupt:
            print("\n‚èπÔ∏è  Symulacja zatrzymana przez u≈ºytkownika")
        except Exception as e:
            print(f"\n‚ùå Nieoczekiwany b≈ÇƒÖd: {e}")
        finally:
            self.producer.close()
            print("üîö Symulacja zako≈Ñczona")

    def send_test_data(self, count=10):
        """
        Wysy≈Ça testowe dane (dla szybkiego testu)
        """
        print(f"üß™ Wysy≈Çanie {count} testowych pomiar√≥w...")

        for i in range(count):
            city = random.choice(list(self.cities.keys()))
            config = self.cities[city]
            temperature = self.generate_temperature(config)
            sensor_data = self.create_sensor_data(city, temperature)

            if self.send_data(sensor_data):
                time.sleep(1)

        print("‚úÖ Test zako≈Ñczony")


def main():
    """
    G≈Ç√≥wna funkcja uruchamiajƒÖca symulator
    """
    print("üöÄ IoT Temperature Sensor Simulator")
    print("=" * 40)

    # Utw√≥rz symulator
    simulator = TemperatureSensorSimulator()

    while True:
        print("\nüìã Wybierz opcjƒô:")
        print("1. Uruchom symulacjƒô (ciƒÖg≈Çe wysy≈Çanie)")
        print("2. Wy≈õlij testowe dane (10 pomiar√≥w)")
        print("3. Konfiguracja zaawansowana")
        print("4. Zako≈Ñcz")

        choice = input("\nTw√≥j wyb√≥r (1-4): ").strip()

        if choice == '1':
            try:
                duration = int(input("Czas symulacji w minutach (domy≈õlnie 60): ") or 60)
                interval = int(input("Odstƒôp miƒôdzy danymi w sekundach (domy≈õlnie 5): ") or 5)
                simulator.run_simulation(duration, interval)
            except ValueError:
                print("‚ùå Nieprawid≈Çowa warto≈õƒá liczbowa")

        elif choice == '2':
            simulator.send_test_data()

        elif choice == '3':
            print("\nüîß Konfiguracja zaawansowana:")
            print("Obecnie niedostƒôpna - edytuj kod aby zmieniƒá miasta lub parametry")

        elif choice == '4':
            print("üëã Do widzenia!")
            break

        else:
            print("‚ùå Nieprawid≈Çowy wyb√≥r")

# main
if __name__ == "__main__":
    main()